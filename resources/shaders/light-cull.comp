#version 460 core
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_debug_printf : enable


layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;


struct PointLight
{
	vec3 position;
	vec3 color;
	float intenstity;
	float radius;
};

layout(scalar, buffer_reference, buffer_reference_align = 4) buffer PointLights
{
	PointLight pointLights[];
};

layout(scalar, buffer_reference, buffer_reference_align = 4) buffer LightIndices
{
	int lightIndices[];
};


layout(rg32ui, binding = 1, set = 0) uniform writeonly uimage2D lightsGrid;
layout(binding = 2) uniform sampler2D depthTexture;

struct ViewData
{
	mat4 view;
	mat4 proj;
	mat4 viewProj;
    mat4 inverseProjection;

	vec3 position;

	ivec2 extent;
	float nearPlane;
	float farPlane;
};

layout(scalar, buffer_reference, buffer_reference_align = 4) buffer ViewDataBuffer
{
	ViewData viewData;
};


layout(scalar, buffer_reference, buffer_reference_align = 4) buffer GlobalLightsCounter
{
	uint counter;
};

layout(push_constant) uniform pushConst
{
	PointLights         lightsPtr;
	LightIndices        lightIndicesPtr;
	ViewDataBuffer      viewDataPtr;
    GlobalLightsCounter lightCounterPtr;

	uint lightsCount;
    uint maxLightsPerCluster;
    uint tileSize;
};

// Resource to visualize:
// Equations of planes
// https://web.ma.utexas.edu/   users/m408m/Display12-5-3.shtml
vec4 CreatePlaneForFrustum(vec3 eyePos, vec3 tileP1, vec3 tileP2)
{
    vec3 p0 = tileP1 - eyePos;
    vec3 p1 = tileP2  - eyePos;

    vec4 planeNormal;
    planeNormal.xyz = normalize(cross(p0, p1));
    planeNormal.w = dot(planeNormal.xyz, eyePos);

    return planeNormal;
}


vec4 ClipToView(vec4 data)
{
    // Convert clip to view
    vec4 dataView = viewDataPtr.viewData.inverseProjection * data;
    // Perspective division
    dataView =  dataView / dataView.w;

    return dataView;
}

vec4 ScreenToView(vec4 data)
{
    vec2 NDC;

	ivec2 screenExtent = viewDataPtr.viewData.extent;

    NDC.x = (2.0 * data.x) / screenExtent.x - 1.0;
    NDC.y = (2.0 * data.y) / screenExtent.y - 1.0;

    vec4 clip = vec4(vec2(NDC), data.z, data.w);


    return ClipToView(clip);
}

const int LOCAL_LIGHT_INDICES_MAX_SIZE = 128;

shared int minDepth;
shared int maxDepth;
shared int localLightCount;
shared vec4 frustumPlanes[4];
shared int localLightIndices[LOCAL_LIGHT_INDICES_MAX_SIZE];

void AppendLightOpaque(uint lightIndex)
{
    uint index = atomicAdd(localLightCount, 1);
    if(index >= maxLightsPerCluster) return;

    localLightIndices[index]  = int(lightIndex);
}



void main()
{
    // Sampling depth texture
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    float depthFloat = texelFetch(depthTexture, texCoord, 0).r;
    depthFloat = depthFloat * 2.0 - 1.0;
    int depthInt = floatBitsToInt(depthFloat);


    if(gl_LocalInvocationIndex == 0)
    {
        minDepth = 0x7FFFFFFF;
        maxDepth = 0;
		localLightCount = 0;
	}
    
	barrier();

    atomicMin(minDepth, depthInt);
    atomicMax(maxDepth, depthInt);
    
    barrier();


    float minDepthFloat = intBitsToFloat(minDepth);
    float maxDepthFloat = intBitsToFloat(maxDepth);
    
	if(gl_LocalInvocationIndex == 0)
	{
		vec3 eyePos   = vec3(0.0, 0.0, 0.0); // eye pos in view space is origin
		 
    
		vec4 pointsInScreen[4];
        pointsInScreen[0] = vec4(gl_WorkGroupID.xy * tileSize, 0.0, 1.0);
        pointsInScreen[1] = vec4(vec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y) * tileSize, 0.0, 1.0);
        pointsInScreen[2] = vec4(vec2(gl_WorkGroupID.x, gl_WorkGroupID.y + 1) * tileSize, 0.0, 1.0);
        pointsInScreen[3] = vec4(vec2(gl_WorkGroupID.x + 1, gl_WorkGroupID.y + 1) * tileSize, 0.0, 1.0);
        

		vec3 pointsInView[4];
        for(int i = 0; i < 4; ++i)
        {
            pointsInView[i] = ScreenToView(pointsInScreen[i]).xyz;
        }
     
        // left
        frustumPlanes[0] = CreatePlaneForFrustum(eyePos, pointsInView[2], pointsInView[0]);
        // right
        frustumPlanes[1] = CreatePlaneForFrustum(eyePos, pointsInView[1], pointsInView[3]);
        // bottom
        frustumPlanes[2] = CreatePlaneForFrustum(eyePos, pointsInView[0], pointsInView[1]);
        // top
        frustumPlanes[3] = CreatePlaneForFrustum(eyePos, pointsInView[3], pointsInView[2]);
	}
    
    barrier();
    
    float minDepthVS = ClipToView(vec4(0.0, 0.0,   minDepth, 1.0)).z;
    float maxDepthVS = ClipToView(vec4(0.0, 0.0,   maxDepth, 1.0)).z;
    vec4  minPlane   = vec4(0.0, 0.0, -1.0, -minDepthVS);

    int lightStep = int(gl_WorkGroupSize.x * gl_WorkGroupSize.y);
    for(uint i = gl_LocalInvocationIndex; i < lightsCount; i += lightStep)
    {
        vec3 pos     =  lightsPtr.pointLights[i].position;
        float radius =  lightsPtr.pointLights[i].radius;
    
        vec4 lightPosView = viewDataPtr.viewData.view * vec4(pos, 1.0);

        float nearPlane = 0.0;
        // Depth test. Values inverted because in vulkan 0 is the front face
        if(lightPosView.z + radius < minDepthVS || lightPosView.z - radius > maxDepthVS)
             continue;


        float dist = -1.0;
    
        for(uint j = 0; j < 4; ++j)
        {
            dist = dot(frustumPlanes[j].xyz, lightPosView.xyz) - frustumPlanes[j].w;
            
            if(dist < -radius) // light outside
                break;
        }
    
        // && !(dot(minPlane.xyz, lightPosView.xyz) - minPlane.w < -radius)
        if(dist >= -radius)
        {
            AppendLightOpaque(i);
        }
    }
    
    barrier();
    
    if(gl_LocalInvocationIndex == 0)
    {
        uint offset = atomicAdd(lightCounterPtr.counter, localLightCount);
        for(uint i = 0; i < localLightCount; ++i)
        {
            lightIndicesPtr.lightIndices[offset + i] = localLightIndices[i];
        }
    
        uint startIndex = offset;
    
        ivec2 coords = ivec2(gl_WorkGroupID.xy);
        imageStore(lightsGrid, coords, uvec4(startIndex, localLightCount, 0, 0));
    }
}